/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;


import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;


public class App {

    public static void main(String[] args) {

        try {
            // get the quote
            Quote ronQuote = getQuoteFromRonAPI();

            // print the quote
            System.out.println(ronQuote);

            // cache the quote:

            // --- set cache file location
            String fileLocation = "src/main/resources/recentquotes.json";

            // --- retrieve the current cache
            ArrayList<Quote> currentQuotes = getQuotesFromFile(fileLocation);

            // --- add the new quote only if it isn't already there
            addQuoteToCache(ronQuote, currentQuotes);

            // --- save the cache to the file
            writeToFile(currentQuotes, fileLocation);

        } catch ( IOException e ) {
            // get all the cached quotes
            ArrayList<Quote> quotes = getQuotesFromFile("src/main/resources/recentquotes.json");
            // choose a random location
            int randomQuoteLocation = generateRandomNumberBetween(0, quotes.size());

            // print the cached quote at that random location
            System.out.println(quotes.get(randomQuoteLocation));

            // no need to cache, no new quote
        }
    }

    public static Quote getQuoteFromRonAPI() throws IOException {
        // https://www.baeldung.com/java-http-request
        URL url = new URL("https://ron-swanson-quotes.herokuapp.com/v2/quotes");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String inputLine;
        StringBuilder content = new StringBuilder();

        // https://github.com/codefellows/seattle-java-401d5/blob/master/class-09/apiFun/ApiFun.java
        while ( (inputLine = in.readLine()) != null ){
            content.append(inputLine);
        }
        in.close();

        Gson gson = new Gson();
        String[] ronTextArr = gson.fromJson(content.toString(), String[].class);
        Quote ronQuote = new Quote(ronTextArr[0]);
        return ronQuote;
    }

    public static ArrayList<Quote> addQuoteToCache(Quote newQuote, ArrayList<Quote> currentQuotes) {
        boolean isAlreadyCached = false;

        for ( int i = 0; i < currentQuotes.size(); i++ ) {
            if ( currentQuotes.get(i).text.equals(newQuote.text) ) {
                // the quote is already in the cache
                isAlreadyCached = true;
            }
        }
        if ( isAlreadyCached == false ) {
            // add the new quote to current quotes
            currentQuotes.add(newQuote);
        }
        return currentQuotes;
    }

    public static void writeToFile(ArrayList<Quote> quotes, String fileLocation){
        Gson gson = new Gson();
        String allQuotes = gson.toJson(quotes);

        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileLocation));
            writer.write(allQuotes);
            writer.close();
        } catch (IOException e){
            System.out.println("Error writing to file");
            e.printStackTrace();
        }
    }


    // read in the file, return it as an array of quote objects
        // in: file location (String)
        // out: ArrayList<Quote>
    public static ArrayList<Quote> getQuotesFromFile(String fileLocation) {
        try {
            FileReader reader = new FileReader(fileLocation);
            Gson gson = new Gson();

            // https://stackoverflow.com/questions/4318458/how-to-deserialize-a-list-using-gson-or-another-json-library-in-java
            ArrayList<Quote> quotes2 = gson.fromJson(reader, new TypeToken<ArrayList<Quote>>() {
            }.getType());

            return quotes2;
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            throw new RuntimeException("Error reading from cache file");
        }
    }


    // generate a random number between two given values (zero and length of quotes array)
        // in: min & max
        // out: random int between
        // min is inclusive, max is not
    public static int generateRandomNumberBetween(int min, int max){
        // cite source here
        if ( min >= max ){
            throw new IllegalArgumentException("max must be greater than min");
        }
        int ranNum = (int)((Math.random() * max ) + min);
        return ranNum;
    }

}
